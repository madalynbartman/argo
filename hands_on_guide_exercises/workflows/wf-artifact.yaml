apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: wf-artifact
spec:
  entrypoint: dag-template
  arguments:
    parameters:
    - name: message1
      value: Task 1 is executed 
    - name: message2
      value: Task 2 is executed 
  templates:
  - name: dag-template-two
    inputs:
      parameters:
      - name: message1
      - name: message2
      - name: message3
      - name: message4
    dag:
      tasks:
      - name: Task1
        arguments:
          parameters: [{name: text, value: "{{inputs.parameters.message1}}"}]
        template: task-template
      - name: Task2
        arguments:
          parameters: [{name: text, value: "{{inputs.parameters.message2}}"}]
        template: task-template # task 2 will start after task 1 
      - name: Task3
        arguments:
          parameters: [{name: text, value: "{{inputs.parameters.message3}}"}]
        template: task-output-artifact
        dependencies: [Task1] # task 2 and 3 will be executed in parallel to match the steps template
      - name: Task4
        dependencies: [Task2, Task3] # will be executed last. Its a graph so you have to define the dependencies not the steps 
        arguments:
          artifacts: [{name: text, value: "{{tasks.task3.outputs.artifacts.artifact-out}"}]
        template: task-input-artifact
       
    - name: task-output-artifact
      inputs: 
        paramets:
        - name: text
      script:
        image: python:3.8-slim
        command: [python]
        source: |
          var par = "Whatever parameters are written to the file":
          const fs = require('fs')
          fs.writeFile("/tmp/output-params.txt, par)
        outputs: 
          artifacts:
          - name: artifact-out
            path: /tmp/output-params.txt

      - name: task-input-artifact
        inputs:
          artifacts:
          - name: text
            path: /tmp/text      
        script:
          image: python:3.8-slim
          command: [python]
          source: |
          with open"/tmp/path", "r") as f:
            lines = f.read()
            print(lines)